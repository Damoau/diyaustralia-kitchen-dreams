import React from 'react';
import { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';
import { usePayPalPayment } from '@/hooks/usePayPalPayment';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Info } from 'lucide-react';

interface PayPalPaymentButtonProps {
  amount: number;
  checkoutId?: string;
  scheduleId?: string;
  description?: string;
  onSuccess?: (data: any) => void;
  onError?: (error: any) => void;
  disabled?: boolean;
}

export const PayPalPaymentButton = ({
  amount,
  checkoutId,
  scheduleId,
  description,
  onSuccess,
  onError,
  disabled = false
}: PayPalPaymentButtonProps) => {
  const { createPayPalOrder, capturePayPalOrder, handlePayPalError, isProcessing } = usePayPalPayment();

  const initialOptions = {
    clientId: 'AZDxjDScFpQtjWTOUtWKbyN_bDt4OgqaF4eYXlewfBP4-8aqX3PiV8e1GWU6liB2CUXlkA59kkkxnNpz', // Sandbox client ID
    currency: 'AUD',
    intent: 'capture',
  };

  return (
    <PayPalScriptProvider options={initialOptions}>
      <div className="space-y-4">
        <Alert>
          <Info className="h-4 w-4" />
          <AlertDescription>
            PayPal payment processing will redirect you to PayPal for secure payment completion.
          </AlertDescription>
        </Alert>
        
        <PayPalButtons
          disabled={disabled || isProcessing}
          style={{
            layout: 'vertical',
            color: 'blue',
            shape: 'rect',
            label: 'paypal'
          }}
          createOrder={async (data, actions) => {
            try {
              const orderId = await createPayPalOrder({
                orderId: '', // This will be generated by PayPal
                amount,
                currency: 'AUD',
                description,
                checkoutId,
                scheduleId
              });
              return orderId;
            } catch (error) {
              handlePayPalError(error);
              throw error;
            }
          }}
          onApprove={async (data, actions) => {
            try {
              const result = await capturePayPalOrder(data.orderID, checkoutId);
              onSuccess?.(result);
              return result;
            } catch (error) {
              handlePayPalError(error);
              onError?.(error);
              throw error;
            }
          }}
          onError={(error) => {
            handlePayPalError(error);
            onError?.(error);
          }}
          onCancel={() => {
            console.log('PayPal payment cancelled');
          }}
        />
      </div>
    </PayPalScriptProvider>
  );
};